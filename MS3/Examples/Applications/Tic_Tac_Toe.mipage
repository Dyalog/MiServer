:class Tic_Tac_Toe :MiPageSample
⍝ Control:: Tic_Tac_Toe
⍝ Description:: Text-based Tic Tac Toe

    ∇ Compose;board;size;width;data
      :Access public
     
      Add _.style'[id^="board"] pre {width:20pt; height:20pt; font-size: 12pt; padding: 6pt 4pt 0pt 4pt; margin:0; border: 1px inset}'
     
      size←3                   ⍝ Board size
      WINS←{(1 1⍉⌽⍵)⍪(1 1⍉⍵)⍪(⍉⍵)⍪⍵}size size⍴⍳size*2 ⍝ All possible winning lines
      XOS←' X ' ' O '          ⍝ Symbol for each player
      width←⊃⌈/⍴¨,¨XOS         ⍝ Cell size
      XOS←width↑¨XOS           ⍝ Equalize lengths
      NEXT←⊃XOS                ⍝ Next player to place mark
      BLANK←⊂width↑''          ⍝ Empty cells of matching width
      STATE←BLANK/⍨size*2      ⍝ Current board state
     
      ALL←,⊃∘.,/↓'rc'∘.,⍕¨⍳size ⍝ All cell names 'r1c1' 'c1c2' etc.
     
      Add _.h2(⍕'- 'XOS' board -')
      board←'#board'Add _.Table
      board.Data←size size⍴⊂_.pre BLANK  ⍝ empty cells
      board.MakeCellIds←1                ⍝ 'tableId_r1c1' 'tableId_c1c2' etc.
      Add _.Handler'#board' 'click' 'OnClick'('cell' 'event' 'currentTarget.id')'td'
     
      Add _.br
      '#output'Add _.p'Next: ',⊃XOS
      ('reset'Add _.button'Clear board').On'click' 'OnClick'
    ∇

    ∇ js←OnClick;curr;reset;cell ⍝ Universal callback function
      :Access public
      js←''
      reset←'reset'≡_what                ⍝ Did user click Reset?
      :If reset∨(Won STATE)∨~BLANK∊STATE ⍝ Reset the board?
          js,←'[id^=''board_'']'Replace _.pre BLANK ⍝ Client - must use single quotes!
          STATE⊢¨←BLANK                             ⍝ Server
          →reset/0
      :EndIf
      cell←'#',Get'cell'
      curr←ALL⍳⊂7↓cell                ⍝ Index of chosen cell
      :If BLANK≡curr⌷STATE            ⍝ Is selection available?
          js,←cell Replace _.pre NEXT   ⍝ Client update
          STATE[curr]←⊂NEXT             ⍝ Server update
          :If Won STATE
              js,←0 Msg NEXT,' wins'
              NEXT←⊃XOS               ⍝ Reset server next player
          :ElseIf ~BLANK∊STATE
              js,←0 Msg'Tie game'
          :Else
              NEXT←⊃XOS⌽⍨XOS⍳⊂NEXT  ⍝ Next player
              js,←2 Msg NEXT ⍝ Update footer
          :EndIf
      :Else
          js←1 Msg'That spot is occupied'
      :EndIf
    ∇

    Won←{1∊∧/XOS∘.≡⍵[WINS]}          ⍝ Scalar boolean if any player won

      Msg←{2=⍺:'#output'Replace'Next: ',⍵      ⍝ 2:Next player
          ⍺:'#output'Append' ─ ',⍵,'!'         ⍝ 1:Append
          '#output'Replace ⍵,'! ─ Next: ',⊃XOS ⍝ 0:Replace
      }
    
:endclass
