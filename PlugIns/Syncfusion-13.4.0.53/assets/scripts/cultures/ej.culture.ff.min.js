ej.addCulture("ff", { name: "ff", englishName: "Fulah", nativeName: "Fulah", language: "ff", numberFormat: { ",": " ", ".": ",", NaN: "Non Numérique", negativeInfinity: "-Infini", positiveInfinity: "+Infini", percent: { ",": " ", ".": "," }, currency: { pattern: ["-n $", "n $"], ",": " ", ".": ",", symbol: "XOF" } }, calendars: { standard: { firstDay: 1, days: { names: ["alete", "altine", "talaata", "alarba", "alkamiisa", "aljumaa", "asete"], namesAbbr: ["alet", "alt.", "tal.", "alar.", "alk.", "alj.", "aset"], namesShort: ["Al", "Te", "Ta", "Al", "Al", "Ju", "As"] }, months: { names: ["samwiee", "feeburyee", "marsa", "awril", "me", "suyeŋ", "sulyee", "ut", "satambara", "oktoobar", "nowamburu", "deesamburu", ""], namesAbbr: ["samw", "feeb", "mar", "awr", "me", "suy", "sul", "ut", "sat", "okt", "now", "dees", ""] }, AM: null, PM: null, patterns: { d: "dd/MM/yyyy", D: "dddd d MMMM yyyy", t: "HH:mm", T: "HH:mm:ss", f: "dddd d MMMM yyyy HH:mm", F: "dddd d MMMM yyyy HH:mm:ss", M: "dd MMMM" } }, Hijri: { name: "Hijri", firstDay: 1, days: { names: ["Alati", "Tenen", "Talaata", "Alarba", "Alkamisa", "Juma", "Asewe"], namesAbbr: ["Ala", "Ten", "Tal", "Ala", "Alk", "Jum", "Ase"], namesShort: ["Al", "Te", "Ta", "Al", "Al", "Ju", "As"] }, months: { names: ["haaraana", "dewo haaraana", "gammu", "rakki gammu", "rakkaati gammu", "afuru", "yummum yaawa", "yaawa", "koorka", "humturaandu", "safturaandu", "taaski", ""], namesAbbr: ["haar", "d. haar", "gam", "r. gam", "ri. gam", "afu", "y. yaa", "yaa", "koor", "humt", "saft", "taas", ""] }, AM: null, PM: null, twoDigitYearMax: 1451, patterns: { d: "dd/MM/yyyy", D: "dddd d MMMM yyyy", t: "HH:mm", T: "HH:mm:ss", f: "dddd d MMMM yyyy HH:mm", F: "dddd d MMMM yyyy HH:mm:ss", M: "d MMMM" }, convert: { ticks1970: 621355968e5, monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355], minDate: -425216736e5, maxDate: 0xe677d21fdbff, hijriAdjustment: 0, toGregorian: function (a, e, t) { var s = this.daysToYear(a) + this.monthDays[e] + t - 1 - this.hijriAdjustment, r = new Date(864e5 * s - this.ticks1970); return r.setMinutes(r.getMinutes() + r.getTimezoneOffset()), r }, fromGregorian: function (a) { if (a < this.minDate || a > this.maxDate) return null; var e, t, s = this.ticks1970 + (a - 0) - 6e4 * a.getTimezoneOffset(), r = Math.floor(s / 864e5) + 1 + this.hijriAdjustment, n = Math.floor(30 * (r - 227013) / 10631) + 1, m = this.daysToYear(n), i = this.isLeapYear(n) ? 355 : 354; m > r ? (n--, m -= i) : r === m ? (n--, m = this.daysToYear(n)) : r > m + i && (m += i, n++), t = 0; for (var d = r - m; 11 >= t && d > this.monthDays[t];) t++; return t--, e = d - this.monthDays[t], [n, t, e] }, daysToYear: function (a) { for (var e = 30 * Math.floor((a - 1) / 30), t = a - e - 1, s = Math.floor(10631 * e / 30) + 227013; t > 0;) s += this.isLeapYear(t) ? 355 : 354, t--; return s }, isLeapYear: function (a) { return 11 > (11 * a + 14) % 30 } } } } });