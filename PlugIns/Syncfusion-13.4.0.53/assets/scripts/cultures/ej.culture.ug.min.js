ej.addCulture("ug", { name: "ug", englishName: "Uyghur", nativeName: "ئۇيغۇرچە", language: "ug", isRTL: !0, numberFormat: { NaN: "سان ئەمەس", negativeInfinity: "مەنپىي چەكسىزلىك", positiveInfinity: "مۇسبەت چەكسىزلىك", percent: { pattern: ["-n%", "n%"] }, currency: { pattern: ["$-n", "$n"], symbol: "¥" } }, calendars: { standard: { "/": "-", firstDay: 1, days: { names: ["يەكشەنبە", "دۈشەنبە", "سەيشەنبە", "چارشەنبە", "پەيشەنبە", "جۈمە", "شەنبە"], namesAbbr: ["يە", "دۈ", "سە", "چا", "پە", "جۈ", "شە"], namesShort: ["ي", "د", "س", "چ", "پ", "ج", "ش"] }, months: { names: ["يانۋار", "فېۋرال", "مارت", "ئاپرېل", "ماي", "ئىيۇن", "ئىيۇل", "ئاۋغۇست", "سېنتەبىر", "ئۆكتەبىر", "نويابىر", "دېكابىر", ""], namesAbbr: ["1-ئاي", "2-ئاي", "3-ئاي", "4-ئاي", "5-ئاي", "6-ئاي", "7-ئاي", "8-ئاي", "9-ئاي", "10-ئاي", "11-ئاي", "12-ئاي", ""] }, AM: ["چۈشتىن بۇرۇن", "چۈشتىن بۇرۇن", "چۈشتىن بۇرۇن"], PM: ["چۈشتىن كېيىن", "چۈشتىن كېيىن", "چۈشتىن كېيىن"], patterns: { d: "yyyy-M-d", D: "yyyy-'يىل' d-MMMM", t: "H:mm", T: "H:mm:ss", f: "yyyy-'يىل' d-MMMM H:mm", F: "yyyy-'يىل' d-MMMM H:mm:ss", M: "d-MMMM", Y: "yyyy-'يىلى' MMMM" } }, Hijri: { name: "Hijri", "/": "-", firstDay: 1, days: { names: ["يەكشەنبە", "دۈشەنبە", "سەيشەنبە", "چارشەنبە", "پەيشەنبە", "جۈمە", "شەنبە"], namesAbbr: ["يە", "دۈ", "سە", "چا", "پە", "جۈ", "شە"], namesShort: ["ي", "د", "س", "چ", "پ", "ج", "ش"] }, months: { names: ["مۇھەررەم", "سەپەر", "رەبىئۇلئەۋۋەل", "رەبىئۇلئاخىر", "جەمادىيەلئەۋۋەل", "جەمادىيەلئاخىر", "رەجەب", "شەئبان", "رامىزان", "شەۋۋال", "زۇلقەئدە", "زۇلھەججە", ""], namesAbbr: ["مۇھەررەم", "سەپەر", "رەبىئۇلئەۋۋەل", "رەبىئۇلئاخىر", "جەمادىيەلئەۋۋەل", "جەمادىيەلئاخىر", "رەجەب", "شەئبان", "رامىزان", "شەۋۋال", "زۇلقەئدە", "زۇلھەججە", ""] }, AM: ["چۈشتىن بۇرۇن", "چۈشتىن بۇرۇن", "چۈشتىن بۇرۇن"], PM: ["چۈشتىن كېيىن", "چۈشتىن كېيىن", "چۈشتىن كېيىن"], twoDigitYearMax: 1451, patterns: { d: "yyyy-M-d", D: "yyyy-'يىل' d-MMMM", t: "H:mm", T: "H:mm:ss", f: "yyyy-'يىل' d-MMMM H:mm", F: "yyyy-'يىل' d-MMMM H:mm:ss", M: "d-MMMM", Y: "yyyy-'يىلى' MMMM" }, convert: { ticks1970: 621355968e5, monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355], minDate: -425216736e5, maxDate: 0xe677d21fdbff, hijriAdjustment: 0, toGregorian: function (t, e, a) { var s = this.daysToYear(t) + this.monthDays[e] + a - 1 - this.hijriAdjustment, n = new Date(864e5 * s - this.ticks1970); return n.setMinutes(n.getMinutes() + n.getTimezoneOffset()), n }, fromGregorian: function (t) { if (t < this.minDate || t > this.maxDate) return null; var e, a, s = this.ticks1970 + (t - 0) - 6e4 * t.getTimezoneOffset(), n = Math.floor(s / 864e5) + 1 + this.hijriAdjustment, r = Math.floor(30 * (n - 227013) / 10631) + 1, i = this.daysToYear(r), y = this.isLeapYear(r) ? 355 : 354; i > n ? (r--, i -= y) : n === i ? (r--, i = this.daysToYear(r)) : n > i + y && (i += y, r++), a = 0; for (var M = n - i; 11 >= a && M > this.monthDays[a];) a++; return a--, e = M - this.monthDays[a], [r, a, e] }, daysToYear: function (t) { for (var e = 30 * Math.floor((t - 1) / 30), a = t - e - 1, s = Math.floor(10631 * e / 30) + 227013; a > 0;) s += this.isLeapYear(a) ? 355 : 354, a--; return s }, isLeapYear: function (t) { return 11 > (11 * t + 14) % 30 } } } } });