ej.addCulture("kk", { name: "kk", englishName: "Kazakh", nativeName: "Қазақ", language: "kk", numberFormat: { ",": " ", ".": ",", percent: { pattern: ["-n%", "n%"], ",": " ", ".": "," }, currency: { pattern: ["-$n", "$n"], ",": " ", ".": "-", symbol: "₸" } }, calendars: { standard: { "/": "-", firstDay: 1, days: { names: ["Жексенбі", "Дүйсенбі", "Сейсенбі", "Сәрсенбі", "Бейсенбі", "Жұма", "Сенбі"], namesAbbr: ["Жек", "Дүй", "Сей", "Сәр", "Бей", "Жұм", "Сен"], namesShort: ["Жк", "Дс", "Сс", "Ср", "Бс", "Жм", "Сн"] }, months: { names: ["қаңтар", "ақпан", "наурыз", "сәуір", "мамыр", "маусым", "шілде", "тамыз", "қыркүйек", "қазан", "қараша", "желтоқсан", ""], namesAbbr: ["қаң", "ақп", "нау", "сәу", "мам", "мау", "шіл", "там", "қыр", "қаз", "қар", "жел", ""] }, AM: null, PM: null, patterns: { d: "d-MMM-yy", D: "d MMMM yyyy 'ж.'", t: "HH:mm", T: "HH:mm:ss", f: "d MMMM yyyy 'ж.' HH:mm", F: "d MMMM yyyy 'ж.' HH:mm:ss", M: "d MMMM" } }, Hijri: { name: "Hijri", "/": ".", firstDay: 1, days: { names: ["Жексенбі", "Дүйсенбі", "Сейсенбі", "Сәрсенбі", "Бейсенбі", "Жұма", "Сенбі"], namesAbbr: ["Жек", "Дүй", "Сей", "Сәр", "Бей", "Жұм", "Сен"], namesShort: ["Жк", "Дс", "Сс", "Ср", "Бс", "Жм", "Сн"] }, months: { names: ["Қаңтар", "Ақпан", "Наурыз", "Сәуір", "Мамыр", "Маусым", "Шілде", "Тамыз", "Қыркүйек", "Қазан", "Қараша", "Желтоқсан", ""], namesAbbr: ["Қаң", "Ақп", "Нау", "Сәу", "Мам", "Мау", "Шіл", "Там", "Қыр", "Қаз", "Қар", "Жел", ""] }, AM: null, PM: null, twoDigitYearMax: 1451, patterns: { d: "dd.MM.yyyy", D: "d MMMM yyyy 'ж.'", t: "HH:mm", T: "HH:mm:ss", f: "d MMMM yyyy 'ж.' HH:mm", F: "d MMMM yyyy 'ж.' HH:mm:ss", M: "d MMMM" }, convert: { ticks1970: 621355968e5, monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355], minDate: -425216736e5, maxDate: 0xe677d21fdbff, hijriAdjustment: 0, toGregorian: function (t, e, a) { var s = this.daysToYear(t) + this.monthDays[e] + a - 1 - this.hijriAdjustment, n = new Date(864e5 * s - this.ticks1970); return n.setMinutes(n.getMinutes() + n.getTimezoneOffset()), n }, fromGregorian: function (t) { if (t < this.minDate || t > this.maxDate) return null; var e, a, s = this.ticks1970 + (t - 0) - 6e4 * t.getTimezoneOffset(), n = Math.floor(s / 864e5) + 1 + this.hijriAdjustment, r = Math.floor(30 * (n - 227013) / 10631) + 1, M = this.daysToYear(r), i = this.isLeapYear(r) ? 355 : 354; M > n ? (r--, M -= i) : n === M ? (r--, M = this.daysToYear(r)) : n > M + i && (M += i, r++), a = 0; for (var m = n - M; 11 >= a && m > this.monthDays[a];) a++; return a--, e = m - this.monthDays[a], [r, a, e] }, daysToYear: function (t) { for (var e = 30 * Math.floor((t - 1) / 30), a = t - e - 1, s = Math.floor(10631 * e / 30) + 227013; a > 0;) s += this.isLeapYear(a) ? 355 : 354, a--; return s }, isLeapYear: function (t) { return 11 > (11 * t + 14) % 30 } } } } });