ej.addCulture("ur", { name: "ur", englishName: "Urdu", nativeName: "اُردو", language: "ur", isRTL: !0, numberFormat: { currency: { pattern: ["$n-", "$n"], symbol: "Rs" } }, calendars: { standard: { firstDay: 1, days: { names: ["اتوار", "پير", "منگل", "بدھ", "جمعرات", "جمعه", "هفته"], namesAbbr: ["اتوار", "پير", "منگل", "بدھ", "جمعرات", "جمعه", "هفته"], namesShort: ["ا", "پ", "م", "ب", "ج", "ج", "ه"] }, months: { names: ["جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""], namesAbbr: ["جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""] }, patterns: { d: "dd/MM/yyyy", D: "dd MMMM, yyyy", f: "dd MMMM, yyyy h:mm tt", F: "dd MMMM, yyyy h:mm:ss tt", M: "dd MMMM", Y: "MMMM, yyyy" } }, Hijri: { name: "Hijri", firstDay: 1, days: { names: ["اتوار", "پير", "منگل", "بدھ", "جمعرات", "جمعه", "هفته"], namesAbbr: ["اتوار", "پير", "منگل", "بدھ", "جمعرات", "جمعه", "هفته"], namesShort: ["ا", "پ", "م", "ب", "ج", "ج", "ه"] }, months: { names: ["محرّم", "صفر", "ربیع الأوّل", "ربیع الثانی", "جمادى الأول", "جمادى الثانی", "رجب", "شعبان", "رمضان", "شوّال", "ذو القعد", "ذو الحجّ", ""], namesAbbr: ["محرّم", "صفر", "ربیع الأوّل", "ربیع الثانی", "جمادى الأول", "جمادى الثانی", "رجب", "شعبان", "رمضان", "شوّال", "ذو القعد", "ذو الحجّ", ""] }, twoDigitYearMax: 1451, patterns: { d: "dd/MM/yyyy", D: "dd MMMM, yyyy", f: "dd MMMM, yyyy h:mm tt", F: "dd MMMM, yyyy h:mm:ss tt", M: "dd MMMM", Y: "MMMM, yyyy" }, convert: { ticks1970: 621355968e5, monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355], minDate: -425216736e5, maxDate: 0xe677d21fdbff, hijriAdjustment: 0, toGregorian: function (t, e, a) { var s = this.daysToYear(t) + this.monthDays[e] + a - 1 - this.hijriAdjustment, r = new Date(864e5 * s - this.ticks1970); return r.setMinutes(r.getMinutes() + r.getTimezoneOffset()), r }, fromGregorian: function (t) { if (t < this.minDate || t > this.maxDate) return null; var e, a, s = this.ticks1970 + (t - 0) - 6e4 * t.getTimezoneOffset(), r = Math.floor(s / 864e5) + 1 + this.hijriAdjustment, n = Math.floor(30 * (r - 227013) / 10631) + 1, y = this.daysToYear(n), M = this.isLeapYear(n) ? 355 : 354; y > r ? (n--, y -= M) : r === y ? (n--, y = this.daysToYear(n)) : r > y + M && (y += M, n++), a = 0; for (var i = r - y; 11 >= a && i > this.monthDays[a];) a++; return a--, e = i - this.monthDays[a], [n, a, e] }, daysToYear: function (t) { for (var e = 30 * Math.floor((t - 1) / 30), a = t - e - 1, s = Math.floor(10631 * e / 30) + 227013; a > 0;) s += this.isLeapYear(a) ? 355 : 354, a--; return s }, isLeapYear: function (t) { return 11 > (11 * t + 14) % 30 } } } } });