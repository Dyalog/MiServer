ej.addCulture("pa-Arab", { name: "pa-Arab", englishName: "Punjabi", nativeName: "پنجابی", language: "pa-Arab", isRTL: !0, numberFormat: { pattern: ["- n"], NaN: "Nan", percent: { pattern: ["% n-", "% n"] }, currency: { pattern: ["-$ n", "$ n"], symbol: "Rs" } }, calendars: { standard: { "/": "-", ":": ".", firstDay: 1, days: { names: ["پير", "منگل", "بدھ", "جمعرات", "جمعه", "هفته", "اتوار"], namesAbbr: ["پير", "منگل", "بدھ", "جمعرات", "جمعه", "هفته", "اتوار"], namesShort: ["پ", "م", "ب", "ج", "ج", "ه", "ا"] }, months: { names: ["جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""], namesAbbr: ["جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""] }, patterns: { d: "dd-MM-yy", D: "dd MMMM yyyy dddd", t: "h.mm tt", T: "h.mm.ss tt", f: "dd MMMM yyyy dddd h.mm tt", F: "dd MMMM yyyy dddd h.mm.ss tt", M: "dd MMMM", Y: "MMMM, yyyy" } }, Hijri: { name: "Hijri", ":": ".", firstDay: 1, days: { names: ["سومر", "اڱارو", "اربع", "خميس", "جمعو", "ڇنڇر", "آچر"], namesAbbr: ["سو", "اڱ", "ار", "خم", "جمعو", "ڇن", "آچ"], namesShort: ["سو", "اڱ", "ار", "خم", "جم", "ڇن", "آچ"] }, months: { names: ["محرّم", "صفر", "ربیع الأوّل", "ربیع الثانی", "جمادى الأول", "جمادى الثانی", "رجب", "شعبان", "رمضان", "شوّال", "ذو القعد", "ذو الحجّ", ""], namesAbbr: ["محرّم", "صفر", "ربیع الأوّل", "ربیع الثانی", "جمادى الأول", "جمادى الثانی", "رجب", "شعبان", "رمضان", "شوّال", "ذو القعد", "ذو الحجّ", ""] }, twoDigitYearMax: 1451, patterns: { d: "dd/MM/yyyy", D: "dddd, dd MMMM, yyyy", t: "h.mm tt", T: "h.mm.ss tt", f: "dddd, dd MMMM, yyyy h.mm tt", F: "dddd, dd MMMM, yyyy h.mm.ss tt", M: "dd MMMM", Y: "MMMM, yyyy" }, convert: { ticks1970: 621355968e5, monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355], minDate: -425216736e5, maxDate: 0xe677d21fdbff, hijriAdjustment: 0, toGregorian: function (t, a, e) { var s = this.daysToYear(t) + this.monthDays[a] + e - 1 - this.hijriAdjustment, n = new Date(864e5 * s - this.ticks1970); return n.setMinutes(n.getMinutes() + n.getTimezoneOffset()), n }, fromGregorian: function (t) { if (t < this.minDate || t > this.maxDate) return null; var a, e, s = this.ticks1970 + (t - 0) - 6e4 * t.getTimezoneOffset(), n = Math.floor(s / 864e5) + 1 + this.hijriAdjustment, r = Math.floor(30 * (n - 227013) / 10631) + 1, d = this.daysToYear(r), M = this.isLeapYear(r) ? 355 : 354; d > n ? (r--, d -= M) : n === d ? (r--, d = this.daysToYear(r)) : n > d + M && (d += M, r++), e = 0; for (var y = n - d; 11 >= e && y > this.monthDays[e];) e++; return e--, a = y - this.monthDays[e], [r, e, a] }, daysToYear: function (t) { for (var a = 30 * Math.floor((t - 1) / 30), e = t - a - 1, s = Math.floor(10631 * a / 30) + 227013; e > 0;) s += this.isLeapYear(e) ? 355 : 354, e--; return s }, isLeapYear: function (t) { return 11 > (11 * t + 14) % 30 } } } } });