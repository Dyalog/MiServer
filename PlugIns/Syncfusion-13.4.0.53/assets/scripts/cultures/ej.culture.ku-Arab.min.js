ej.addCulture("ku-Arab", { name: "ku-Arab", englishName: "Central Kurdish", nativeName: "کوردیی ناوەڕاست", language: "ku-Arab", isRTL: !0, numberFormat: { ",": "٬", NaN: "ناژمارە", negativeInfinity: "-∞", positiveInfinity: "∞", percent: { pattern: ["-%n", "%n"], ",": "٬", symbol: "٪" }, currency: { pattern: ["$-n", "$n"], ",": "،", symbol: "د.ع.‏" } }, calendars: { standard: { days: { names: ["یەکشەممە", "دووشەممە", "سێشەممە", "چوارشەممە", "پێنجشەممە", "ھەینی", "شەممە"], namesAbbr: ["یەکشەممە", "دووشەممە", "سێشەممە", "چوارشەممە", "پێنجشەممە", "ھەینی", "شەممە"], namesShort: ["ی", "د", "س", "چ", "پ", "ھ", "ش"] }, months: { names: ["کانوونی دووەم", "شوبات", "ئازار", "نیسان", "ئایار", "حوزەیران", "تەمووز", "ئاب", "ئەیلوول", "تشرینی یەکەم", "تشرینی دووەم", "کانونی یەکەم", ""], namesAbbr: ["کانوونی دووەم", "شوبات", "ئازار", "نیسان", "ئایار", "حوزەیران", "تەمووز", "ئاب", "ئەیلوول", "تشرینی یەکەم", "تشرینی دووەم", "کانونی یەکەم", ""] }, AM: ["پ.ن", "پ.ن", "پ.ن"], PM: ["د.ن", "د.ن", "د.ن"], patterns: { d: "yyyy/MM/dd", D: "dddd, dd MMMM, yyyy", t: "hh:mm tt", T: "hh:mm:ss tt", f: "dddd, dd MMMM, yyyy hh:mm tt", F: "dddd, dd MMMM, yyyy hh:mm:ss tt", M: "d MMMM", Y: "MMMM, yyyy" } }, Hijri: { name: "Hijri", days: { names: ["یەکشەممە", "دووشەممە", "سێشەممە", "چوارشەممە", "پێنجشەممە", "ھەینی", "شەممە"], namesAbbr: ["یەکشەممە", "دووشەممە", "سێشەممە", "چوارشەممە", "پێنجشەممە", "ھەینی", "شەممە"], namesShort: ["ی", "د", "س", "چ", "پ", "ھ", "ش"] }, months: { names: ["ذی الحجه", "سەفەر", "ڕەبیعی یەک", "ڕەبیعی دوو", "جومادی یەک", "جومادی دوو", "رەجەب", "شەعبان", "ڕەمەزان", "شەوال", "زولعەقدە", "زولحەجە", ""], namesAbbr: ["ذی الحجه", "سەفەر", "ڕەبیعی یەک", "ڕەبیعی دوو", "جومادی یەک", "جومادی دوو", "رەجەب", "شەعبان", "ڕەمەزان", "شەوال", "زولعەقدە", "زولحەجە", ""] }, AM: ["پ.ن", "پ.ن", "پ.ن"], PM: ["د.ن", "د.ن", "د.ن"], twoDigitYearMax: 1451, patterns: { d: "yyyy/MM/dd", D: "dddd, dd MMMM, yyyy", t: "hh:mm tt", T: "hh:mm:ss tt", f: "dddd, dd MMMM, yyyy hh:mm tt", F: "dddd, dd MMMM, yyyy hh:mm:ss tt", M: "d MMMM", Y: "MMMM, yyyy" }, convert: { ticks1970: 621355968e5, monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355], minDate: -425216736e5, maxDate: 0xe677d21fdbff, hijriAdjustment: 0, toGregorian: function (t, e, a) { var s = this.daysToYear(t) + this.monthDays[e] + a - 1 - this.hijriAdjustment, n = new Date(864e5 * s - this.ticks1970); return n.setMinutes(n.getMinutes() + n.getTimezoneOffset()), n }, fromGregorian: function (t) { if (t < this.minDate || t > this.maxDate) return null; var e, a, s = this.ticks1970 + (t - 0) - 6e4 * t.getTimezoneOffset(), n = Math.floor(s / 864e5) + 1 + this.hijriAdjustment, r = Math.floor(30 * (n - 227013) / 10631) + 1, d = this.daysToYear(r), M = this.isLeapYear(r) ? 355 : 354; d > n ? (r--, d -= M) : n === d ? (r--, d = this.daysToYear(r)) : n > d + M && (d += M, r++), a = 0; for (var i = n - d; 11 >= a && i > this.monthDays[a];) a++; return a--, e = i - this.monthDays[a], [r, a, e] }, daysToYear: function (t) { for (var e = 30 * Math.floor((t - 1) / 30), a = t - e - 1, s = Math.floor(10631 * e / 30) + 227013; a > 0;) s += this.isLeapYear(a) ? 355 : 354, a--; return s }, isLeapYear: function (t) { return 11 > (11 * t + 14) % 30 } } } } });