ej.addCulture("id-ID", { name: "id-ID", englishName: "Indonesian (Indonesia)", nativeName: "Bahasa Indonesia (Indonesia)", language: "id", numberFormat: { ",": ".", ".": ",", percent: { pattern: ["-n%", "n%"], ",": ".", ".": "," }, currency: { decimals: 0, ",": ".", ".": ",", symbol: "Rp" } }, calendars: { standard: { firstDay: 1, days: { names: ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"], namesAbbr: ["Mgg", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"], namesShort: ["M", "S", "S", "R", "K", "J", "S"] }, months: { names: ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember", ""], namesAbbr: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agu", "Sep", "Okt", "Nov", "Des", ""] }, AM: null, PM: null, patterns: { d: "dd/MM/yyyy", D: "dd MMMM yyyy", t: "H:mm", T: "H:mm:ss", f: "dd MMMM yyyy H:mm", F: "dd MMMM yyyy H:mm:ss", M: "dd MMMM" } }, Hijri: { name: "Hijri", firstDay: 1, days: { names: ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"], namesAbbr: ["Mgg", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"], namesShort: ["M", "S", "S", "R", "K", "J", "S"] }, months: { names: ["Muharam", "Safar", "Rabiulawal", "Rabiulakhir", "Jumadilawal", "Jumadilakhir", "Rajab", "Syakban", "Ramadan", "Syawal", "Zulkaidah", "Zulhijah", ""], namesAbbr: ["Muharam", "Safar", "Rabiulawal", "Rabiulakhir", "Jumadilawal", "Jumadilakhir", "Rajab", "Syakban", "Ramadan", "Syawal", "Zulkaidah", "Zulhijah", ""] }, AM: null, PM: null, twoDigitYearMax: 1451, patterns: { d: "dd/MM/yyyy", D: "dd MMMM yyyy", t: "H:mm", T: "H:mm:ss", f: "dd MMMM yyyy H:mm", F: "dd MMMM yyyy H:mm:ss", M: "dd MMMM" }, convert: { ticks1970: 621355968e5, monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355], minDate: -425216736e5, maxDate: 0xe677d21fdbff, hijriAdjustment: 0, toGregorian: function (a, e, n) { var i = this.daysToYear(a) + this.monthDays[e] + n - 1 - this.hijriAdjustment, t = new Date(864e5 * i - this.ticks1970); return t.setMinutes(t.getMinutes() + t.getTimezoneOffset()), t }, fromGregorian: function (a) { if (a < this.minDate || a > this.maxDate) return null; var e, n, i = this.ticks1970 + (a - 0) - 6e4 * a.getTimezoneOffset(), t = Math.floor(i / 864e5) + 1 + this.hijriAdjustment, s = Math.floor(30 * (t - 227013) / 10631) + 1, r = this.daysToYear(s), m = this.isLeapYear(s) ? 355 : 354; r > t ? (s--, r -= m) : t === r ? (s--, r = this.daysToYear(s)) : t > r + m && (r += m, s++), n = 0; for (var M = t - r; 11 >= n && M > this.monthDays[n];) n++; return n--, e = M - this.monthDays[n], [s, n, e] }, daysToYear: function (a) { for (var e = 30 * Math.floor((a - 1) / 30), n = a - e - 1, i = Math.floor(10631 * e / 30) + 227013; n > 0;) i += this.isLeapYear(n) ? 355 : 354, n--; return i }, isLeapYear: function (a) { return 11 > (11 * a + 14) % 30 } } } } });