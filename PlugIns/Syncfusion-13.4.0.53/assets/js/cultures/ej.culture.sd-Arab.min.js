ej.addCulture("sd-Arab", { name: "sd-Arab", englishName: "Sindhi", nativeName: "سنڌي", language: "sd-Arab", isRTL: !0, numberFormat: { pattern: ["n-"], negativeInfinity: "Infinity-", percent: { pattern: ["-n %", "% n"] }, currency: { pattern: ["-$ n", "$ n"], symbol: "Rs" } }, calendars: { standard: { firstDay: 1, days: { names: ["سومر", "اڱارو", "اربع", "خميس", "جمعو", "ڇنڇر", "آچر"], namesAbbr: ["سو", "اڱ", "ار", "خم", "جمعو", "ڇن", "آچ"], namesShort: ["سو", "اڱ", "ار", "خم", "جم", "ڇن", "آچ"] }, months: { names: ["جنوري", "فروري", "مارچ", "اپريل", "مٔي", "جون", "جولاءِ", "آگست", "ستمبر", "آکتوبر", "نومبر", "ڊسمبر", ""], namesAbbr: ["جنوري", "فروري", "مارچ", "اپريل", "مٔي", "جون", "جولاءِ", "آگست", "ستمبر", "آکتوبر", "نومبر", "ڊسمبر", ""] }, patterns: { d: "dd/MM/yyyy", D: "dddd, dd MMMM, yyyy", f: "dddd, dd MMMM, yyyy h:mm tt", F: "dddd, dd MMMM, yyyy h:mm:ss tt", M: "dd MMMM", Y: "MMMM, yyyy" } }, Hijri: { name: "Hijri", firstDay: 1, days: { names: ["سومر", "اڱارو", "اربع", "خميس", "جمعو", "ڇنڇر", "آچر"], namesAbbr: ["سو", "اڱ", "ار", "خم", "جمعو", "ڇن", "آچ"], namesShort: ["سو", "اڱ", "ار", "خم", "جم", "ڇن", "آچ"] }, months: { names: ["محرّم", "صفر", "ربیع الأوّل", "ربیع الثانی", "جمادى الأول", "جمادى الثانی", "رجب", "شعبان", "رمضان", "شوّال", "ذو القعد", "ذو الحجّ", ""], namesAbbr: ["محرّم", "صفر", "ربیع i", "ربیع ii", "جمادى i", "جمادى ii", "رجب", "شعبان", "رمضان", "شوّال", "ذو القعد", "ذو الحجّ", ""] }, twoDigitYearMax: 1451, patterns: { d: "dd/MM/yyyy", D: "dddd, dd MMMM, yyyy", f: "dddd, dd MMMM, yyyy h:mm tt", F: "dddd, dd MMMM, yyyy h:mm:ss tt", M: "dd MMMM", Y: "MMMM, yyyy" }, convert: { ticks1970: 621355968e5, monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355], minDate: -425216736e5, maxDate: 0xe677d21fdbff, hijriAdjustment: 0, toGregorian: function (t, e, a) { var n = this.daysToYear(t) + this.monthDays[e] + a - 1 - this.hijriAdjustment, s = new Date(864e5 * n - this.ticks1970); return s.setMinutes(s.getMinutes() + s.getTimezoneOffset()), s }, fromGregorian: function (t) { if (t < this.minDate || t > this.maxDate) return null; var e, a, n = this.ticks1970 + (t - 0) - 6e4 * t.getTimezoneOffset(), s = Math.floor(n / 864e5) + 1 + this.hijriAdjustment, d = Math.floor(30 * (s - 227013) / 10631) + 1, i = this.daysToYear(d), r = this.isLeapYear(d) ? 355 : 354; i > s ? (d--, i -= r) : s === i ? (d--, i = this.daysToYear(d)) : s > i + r && (i += r, d++), a = 0; for (var y = s - i; 11 >= a && y > this.monthDays[a];) a++; return a--, e = y - this.monthDays[a], [d, a, e] }, daysToYear: function (t) { for (var e = 30 * Math.floor((t - 1) / 30), a = t - e - 1, n = Math.floor(10631 * e / 30) + 227013; a > 0;) n += this.isLeapYear(a) ? 355 : 354, a--; return n }, isLeapYear: function (t) { return 11 > (11 * t + 14) % 30 } } } } });