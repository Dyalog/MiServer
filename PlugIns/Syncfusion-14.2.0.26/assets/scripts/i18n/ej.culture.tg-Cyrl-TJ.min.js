ej.addCulture("tg-Cyrl-TJ", { name: "tg-Cyrl-TJ", englishName: "Tajik (Cyrillic, Tajikistan)", nativeName: "Тоҷикӣ (Тоҷикистон)", language: "tg-Cyrl", numberFormat: { ",": " ", ".": ",", negativeInfinity: "-∞", positiveInfinity: "∞", percent: { pattern: ["-n%", "n%"], ",": " ", ".": "," }, currency: { pattern: ["-n $", "n $"], ",": " ", ".": ",", symbol: "смн" } }, calendars: { standard: { "/": ".", firstDay: 1, days: { names: ["якшанбе", "душанбе", "сешанбе", "чоршанбе", "панҷшанбе", "ҷумъа", "шанбе"], namesAbbr: ["пкш", "дшб", "сшб", "чшб", "пшб", "ҷум", "шнб"], namesShort: ["яш", "дш", "сш", "чш", "пш", "ҷм", "шб"] }, months: { names: ["январ", "феврал", "март", "апрел", "май", "июн", "июл", "август", "сентябр", "октябр", "ноябр", "декабр", ""], namesAbbr: ["янв", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""] }, AM: null, PM: null, patterns: { d: "dd.MM.yyyy", D: "d MMMM yyyy' с.'", t: "HH:mm", T: "HH:mm:ss", f: "d MMMM yyyy' с.' HH:mm", F: "d MMMM yyyy' с.' HH:mm:ss", M: "dd MMMM" } }, Hijri: { name: "Hijri", "/": ".", firstDay: 1, days: { names: ["Яш", "Душанбе", "Сешанбе", "Чоршанбе", "Панҷшанбе", "Ҷумъа", "Шанбе"], namesAbbr: ["Яш", "Дш", "Сш", "Чш", "Пш", "Ҷм", "Шн"], namesShort: ["Яш", "Дш", "Сш", "Чш", "Пш", "Ҷм", "Шн"] }, months: { names: ["Муҳаррам", "Сафар", "Рабеъулаввал", "Рабеъуссонӣ", "Ҷимодиюлаввал", "Ҷимодиюссонӣ", "Раҷаб", "Шаъбон", "Рамазон", "Шаввол", "Зулқаъда", "Зулҳиҷҷа", ""], namesAbbr: ["Муҳаррам", "Сафар", "Рабеъулаввал", "Рабеъуссонӣ", "Ҷимодиюлаввал", "Ҷимодиюссонӣ", "Раҷаб", "Шаъбон", "Рамазон", "Шаввол", "Зулқаъда", "Зулҳиҷҷа", ""] }, AM: null, PM: null, twoDigitYearMax: 1451, patterns: { d: "dd.MM.yy", D: "d MMMMyyyy", t: "HH:mm", T: "HH:mm:ss", f: "d MMMMyyyy HH:mm", F: "d MMMMyyyy HH:mm:ss", M: "dd MMMM" }, convert: { ticks1970: 621355968e5, monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355], minDate: -425216736e5, maxDate: 0xe677d21fdbff, hijriAdjustment: 0, toGregorian: function (t, e, a) { var n = this.daysToYear(t) + this.monthDays[e] + a - 1 - this.hijriAdjustment, s = new Date(864e5 * n - this.ticks1970); return s.setMinutes(s.getMinutes() + s.getTimezoneOffset()), s }, fromGregorian: function (t) { if (t < this.minDate || t > this.maxDate) return null; var e, a, n = this.ticks1970 + (t - 0) - 6e4 * t.getTimezoneOffset(), s = Math.floor(n / 864e5) + 1 + this.hijriAdjustment, r = Math.floor(30 * (s - 227013) / 10631) + 1, i = this.daysToYear(r), y = this.isLeapYear(r) ? 355 : 354; i > s ? (r--, i -= y) : s === i ? (r--, i = this.daysToYear(r)) : s > i + y && (i += y, r++), a = 0; for (var m = s - i; 11 >= a && m > this.monthDays[a];) a++; return a--, e = m - this.monthDays[a], [r, a, e] }, daysToYear: function (t) { for (var e = 30 * Math.floor((t - 1) / 30), a = t - e - 1, n = Math.floor(10631 * e / 30) + 227013; a > 0;) n += this.isLeapYear(a) ? 355 : 354, a--; return n }, isLeapYear: function (t) { return 11 > (11 * t + 14) % 30 } } } } });