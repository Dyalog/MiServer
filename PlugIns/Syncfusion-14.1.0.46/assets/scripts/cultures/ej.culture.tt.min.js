ej.addCulture("tt", { name: "tt", englishName: "Tatar", nativeName: "Татар", language: "tt", numberFormat: { ",": " ", ".": ",", percent: { ",": " ", ".": "," }, currency: { pattern: ["-n $", "n $"], ",": " ", ".": ",", symbol: "р." } }, calendars: { standard: { "/": ".", firstDay: 1, days: { names: ["якшәмбе", "дүшәмбе", "сишәмбе", "чәршәмбе", "пәнҗешәмбе", "җомга", "шимбә"], namesAbbr: ["якш.", "дүш.", "сиш.", "чәрш.", "пәнҗ.", "җом.", "шим."], namesShort: ["я", "д", "с", "ч", "п", "җ", "ш"] }, months: { names: ["гыйнвар", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь", ""], namesAbbr: ["гыйн.", "фев.", "мар.", "апр.", "май", "июнь", "июль", "авг.", "сен.", "окт.", "нояб.", "дек.", ""] }, AM: null, PM: null, patterns: { d: "dd.MM.yyyy", D: "dd MMMM yyyy' ел'", t: "HH:mm", T: "HH:mm:ss", f: "dd MMMM yyyy' ел' HH:mm", F: "dd MMMM yyyy' ел' HH:mm:ss", M: "d MMMM" } }, Hijri: { name: "Hijri", "/": ".", firstDay: 1, days: { names: ["Якшәмбе", "Дүшәмбе", "Сишәмбе", "Чәршәмбе", "Пәнҗешәмбе", "Җомга", "Шимбә"], namesAbbr: ["Якш.", "Дүш.", "Сиш.", "Чәрш.", "Пәнҗ.", "Җом.", "Шим."], namesShort: ["Я", "Д", "С", "Ч", "П", "Җ", "Ш"] }, months: { names: ["Мөхәррәм", "Сәфәр", "Рабигыль-әүвәл", "Рабигыль-ахир", "Җөмәдиәл-әүвәл", "Җөмәдиәл-ахир", "Рәҗәп", "Шәгъбан", "Рамазан", "Шәүвәл", "Зөлкагыйдә", "Зөлхиҗҗә", ""], namesAbbr: ["Мөхәррәм", "Сәфәр", "Рабигыль-әүвәл", "Рабигыль-ахир", "Җөмәдиәл-әүвәл", "Җөмәдиәл-ахир", "Рәҗәп", "Шәгъбан", "Рамазан", "Шәүвәл", "Зөлкагыйдә", "Зөлхиҗҗә", ""] }, AM: null, PM: null, twoDigitYearMax: 1451, patterns: { d: "dd.MM.yyyy", D: "d MMMM yyyy", t: "HH:mm", T: "HH:mm:ss", f: "d MMMM yyyy HH:mm", F: "d MMMM yyyy HH:mm:ss", M: "d MMMM" }, convert: { ticks1970: 621355968e5, monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355], minDate: -425216736e5, maxDate: 0xe677d21fdbff, hijriAdjustment: 0, toGregorian: function (t, e, a) { var s = this.daysToYear(t) + this.monthDays[e] + a - 1 - this.hijriAdjustment, n = new Date(864e5 * s - this.ticks1970); return n.setMinutes(n.getMinutes() + n.getTimezoneOffset()), n }, fromGregorian: function (t) { if (t < this.minDate || t > this.maxDate) return null; var e, a, s = this.ticks1970 + (t - 0) - 6e4 * t.getTimezoneOffset(), n = Math.floor(s / 864e5) + 1 + this.hijriAdjustment, r = Math.floor(30 * (n - 227013) / 10631) + 1, i = this.daysToYear(r), m = this.isLeapYear(r) ? 355 : 354; i > n ? (r--, i -= m) : n === i ? (r--, i = this.daysToYear(r)) : n > i + m && (i += m, r++), a = 0; for (var M = n - i; 11 >= a && M > this.monthDays[a];) a++; return a--, e = M - this.monthDays[a], [r, a, e] }, daysToYear: function (t) { for (var e = 30 * Math.floor((t - 1) / 30), a = t - e - 1, s = Math.floor(10631 * e / 30) + 227013; a > 0;) s += this.isLeapYear(a) ? 355 : 354, a--; return s }, isLeapYear: function (t) { return 11 > (11 * t + 14) % 30 } } } } });