ej.addCulture("tr-TR", { name: "tr-TR", englishName: "Turkish (Turkey)", nativeName: "Türkçe (Türkiye)", language: "tr", numberFormat: { ",": ".", ".": ",", negativeInfinity: "-Sonsuz", positiveInfinity: "Sonsuz", percent: { pattern: ["-%n", "%n"], ",": ".", ".": "," }, currency: { pattern: ["-n $", "n $"], ",": ".", ".": ",", symbol: "₺" } }, calendars: { standard: { "/": ".", firstDay: 1, days: { names: ["Pazar", "Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi"], namesAbbr: ["Paz", "Pzt", "Sal", "Çar", "Per", "Cum", "Cmt"], namesShort: ["Pz", "Pt", "Sa", "Ça", "Pe", "Cu", "Ct"] }, months: { names: ["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık", ""], namesAbbr: ["Oca", "Şub", "Mar", "Nis", "May", "Haz", "Tem", "Ağu", "Eyl", "Eki", "Kas", "Ara", ""] }, AM: null, PM: null, patterns: { d: "d.M.yyyy", D: "d MMMM yyyy dddd", t: "HH:mm", T: "HH:mm:ss", f: "d MMMM yyyy dddd HH:mm", F: "d MMMM yyyy dddd HH:mm:ss", M: "d MMMM" } }, Hijri: { name: "Hijri", "/": ".", firstDay: 1, days: { names: ["Pazar", "Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi"], namesAbbr: ["Paz", "Pzt", "Sal", "Çar", "Per", "Cum", "Cmt"], namesShort: ["Pz", "Pt", "Sa", "Ça", "Pe", "Cu", "Ct"] }, months: { names: ["Muharrem", "Safer", "Rebiyülevvel", "Rebiyülahir", "Cemaziyelevvel", "Cemaziyelahir", "Recep", "Şaban", "Ramazan", "Şevval", "Zilkade", "Zilhicce", ""], namesAbbr: ["Muharrem", "Safer", "Rebiyülevvel", "Rebiyülahir", "Cemaziyelevvel", "Cemaziyelahir", "Recep", "Şaban", "Ramazan", "Şevval", "Zilkade", "Zilhicce", ""] }, AM: null, PM: null, twoDigitYearMax: 1451, patterns: { d: "dd.MM.yyyy", D: "dd MMMM yyyy dddd", t: "HH:mm", T: "HH:mm:ss", f: "dd MMMM yyyy dddd HH:mm", F: "dd MMMM yyyy dddd HH:mm:ss", M: "d MMMM" }, convert: { ticks1970: 621355968e5, monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355], minDate: -425216736e5, maxDate: 0xe677d21fdbff, hijriAdjustment: 0, toGregorian: function (a, e, t) { var r = this.daysToYear(a) + this.monthDays[e] + t - 1 - this.hijriAdjustment, i = new Date(864e5 * r - this.ticks1970); return i.setMinutes(i.getMinutes() + i.getTimezoneOffset()), i }, fromGregorian: function (a) { if (a < this.minDate || a > this.maxDate) return null; var e, t, r = this.ticks1970 + (a - 0) - 6e4 * a.getTimezoneOffset(), i = Math.floor(r / 864e5) + 1 + this.hijriAdjustment, s = Math.floor(30 * (i - 227013) / 10631) + 1, n = this.daysToYear(s), m = this.isLeapYear(s) ? 355 : 354; n > i ? (s--, n -= m) : i === n ? (s--, n = this.daysToYear(s)) : i > n + m && (n += m, s++), t = 0; for (var y = i - n; 11 >= t && y > this.monthDays[t];) t++; return t--, e = y - this.monthDays[t], [s, t, e] }, daysToYear: function (a) { for (var e = 30 * Math.floor((a - 1) / 30), t = a - e - 1, r = Math.floor(10631 * e / 30) + 227013; t > 0;) r += this.isLeapYear(t) ? 355 : 354, t--; return r }, isLeapYear: function (a) { return 11 > (11 * a + 14) % 30 } } } } });